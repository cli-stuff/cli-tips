`alias`를 사용하여 자신만의 명령어를 만듭니다. 예시: alias ll=`ls -la`
`htop`을 사용하여 시스템 자원을 실시간으로 모니터링합니다
`df -h`를 사용하여 사용 가능한 디스크 공간을 확인합니다
`grep -i` 명령어로 대소문자를 구분하지 않고 검색할 수 있습니다
`crontab -e`를 사용하여 자동 작업을 예약합니다
`du -sh *` 명령어로 현재 폴더의 모든 디렉토리 크기를 확인할 수 있습니다
파일을 빠르게 찾으려면 `find /path/to/search -name filename`을 사용합니다
`lsblk`를 사용하여 모든 블록 장치를 나열합니다
`top`을 사용하여 시스템 프로세스를 모니터링합니다
`ps aux`를 사용하여 실행 중인 프로세스의 상세 정보를 확인합니다
프로세스를 종료하려면 PID와 함께 `kill`을 사용합니다
`chmod +x script.sh`를 사용하여 스크립트를 실행 가능하게 만듭니다
`man command`를 사용하여 모든 명령어의 설명서를 봅니다
`tldr <command>`를 사용하여 간단한 설명서를 확인합니다
`cp -r`을 사용하여 디렉토리를 복사합니다
`mv`를 사용하여 파일을 이동하거나 이름을 변경합니다
`rsync`를 사용하여 빠르고 안정적인 파일 동기화를 수행합니다
`wget`을 사용하여 인터넷에서 파일을 다운로드합니다
`curl -O`를 사용하여 URL에서 파일을 다운로드합니다
`tar -czvf archive.tar.gz directory`를 사용하여 디렉토리를 압축합니다
`tar -xzvf archive.tar.gz`를 사용하여 압축 파일을 풉니다
`sudo`를 사용하여 관리자 권한으로 명령어를 실행합니다
`cat`을 사용하여 파일 내용을 표시합니다
`less`를 사용하여 파일 내용을 페이지 단위로 봅니다
`more`를 사용하여 파일 내용을 한 화면씩 봅니다
`tail -f file`을 사용하여 파일 변경을 실시간으로 모니터링합니다
`head -n 10 file`을 사용하여 파일의 첫 10줄을 봅니다
`grep`을 사용하여 파일 내에서 검색합니다
`cut`을 사용하여 파일의 각 줄에서 섹션을 제거합니다
`sort`를 사용하여 파일의 줄을 정렬합니다
`uniq`를 사용하여 파일에서 중복된 줄을 제거합니다
`diff`를 사용하여 파일을 줄 단위로 비교합니다
`find /path -name filename`을 사용하여 이름으로 파일을 검색합니다
`locate filename`을 사용하여 파일을 이름으로 빠르게 찾습니다
`updatedb`를 사용하여 locate가 사용하는 데이터베이스를 업데이트합니다
`alias`를 사용하여 명령어 단축키를 만듭니다
`export`를 사용하여 환경 변수를 설정합니다
`echo`를 사용하여 터미널에 텍스트를 출력합니다
`which command`를 사용하여 명령어의 경로를 찾습니다
`history`를 사용하여 명령어 기록을 봅니다
`clear`를 사용하여 터미널 화면을 지웁니다
`sudo apt update`를 사용하여 패키지 목록을 업데이트합니다
`sudo apt upgrade`를 사용하여 설치된 패키지를 업그레이드합니다
`sudo apt install <package>`를 사용하여 소프트웨어 패키지를 설치합니다
`sudo apt remove <package>`를 사용하여 패키지를 제거합니다
`apt-cache search <package>`를 사용하여 패키지를 검색합니다
`dpkg -l`을 사용하여 설치된 모든 패키지를 나열합니다
`dpkg -S filename`을 사용하여 파일이 어느 패키지에 속하는지 찾습니다
`snap install <package>`를 사용하여 스냅 패키지를 설치합니다
`snap list`를 사용하여 설치된 스냅 패키지를 나열합니다
`snap remove <package>`를 사용하여 스냅 패키지를 제거합니다
`systemctl start <service>`를 사용하여 시스템 서비스를 시작합니다
`systemctl stop <service>`를 사용하여 시스템 서비스를 중지합니다
`systemctl restart <service>`를 사용하여 시스템 서비스를 재시작합니다
`systemctl enable <service>`를 사용하여 부팅 시 서비스를 활성화합니다
`systemctl disable <service>`를 사용하여 부팅 시 서비스를 비활성화합니다
`journalctl`을 사용하여 시스템 로그를 봅니다
`journalctl -xe`를 사용하여 실시간으로 로그를 봅니다
`lsof`를 사용하여 열린 파일과 프로세스를 나열합니다
`ufw status`를 사용하여 방화벽 상태를 확인합니다
`ufw allow <port>`를 사용하여 특정 포트를 방화벽에서 허용합니다
`ufw deny <port>`를 사용하여 특정 포트를 차단합니다
`ip addr`를 사용하여 네트워크 인터페이스를 표시합니다
`ifconfig`를 사용하여 네트워크 인터페이스를 보고 설정합니다
`ping`을 사용하여 네트워크 연결을 테스트합니다
`netstat`을 사용하여 네트워크 연결과 라우팅 테이블을 표시합니다
`traceroute`를 사용하여 패킷이 목적지에 도달하는 경로를 추적합니다
`nmcli`를 사용하여 CLI로 네트워크 연결을 관리합니다
`hostname`을 사용하여 시스템 호스트 이름을 표시하거나 설정합니다
`whoami`를 사용하여 현재 사용자를 표시합니다
`uptime`을 사용하여 시스템 가동 시간을 확인합니다
`dmesg`를 사용하여 커널 및 시스템 메시지를 봅니다
`lscpu`를 사용하여 CPU 아키텍처 정보를 표시합니다
`free -h`를 사용하여 시스템 메모리 사용량을 봅니다
`watch`를 사용하여 명령어를 주기적으로 실행합니다
`find /path -type f`를 사용하여 파일만 검색합니다
`find /path -type d`를 사용하여 디렉토리만 검색합니다
`chmod`를 사용하여 파일 권한을 변경합니다
`chown`을 사용하여 파일 소유권을 변경합니다
`useradd`를 사용하여 새 사용자를 만듭니다
`usermod`를 사용하여 사용자 계정을 수정합니다
`passwd`를 사용하여 사용자 비밀번호를 변경합니다
`groupadd`를 사용하여 새 그룹을 만듭니다
`groupdel`을 사용하여 그룹을 삭제합니다
`groups`를 사용하여 사용자가 속한 그룹을 나열합니다
`su`를 사용하여 다른 사용자로 전환합니다
`sudo su`를 사용하여 root 사용자가 됩니다
`id`를 사용하여 사용자 및 그룹 ID를 표시합니다
`who`를 사용하여 로그인한 사용자를 확인합니다
`last`를 사용하여 로그인 기록을 봅니다
`chroot`를 사용하여 루트 디렉토리를 변경합니다
`tar -czf`를 사용하여 압축 아카이브를 만듭니다
`tar -xzf`를 사용하여 압축 아카이브를 풉니다
`gzip`을 사용하여 파일을 압축합니다
`gunzip`을 사용하여 압축을 해제합니다
`bzip2`를 사용하여 더 높은 압축률로 파일을 압축합니다
`bunzip2`를 사용하여 bzip2 파일을 해제합니다
`xz`를 사용하여 더욱 높은 압축률로 파일을 압축합니다
`unxz`를 사용하여 xz 파일을 해제합니다
`md5sum`을 사용하여 파일의 MD5 체크섬을 확인합니다
`sha256sum`을 사용하여 파일의 SHA256 체크섬을 확인합니다
`ncdu`를 사용하여 대화형 디스크 사용량 분석기를 실행합니다
`lvm`을 사용하여 논리 볼륨을 관리합니다
`docker`를 사용하여 컨테이너를 관리합니다
`git`을 사용하여 버전 관리를 합니다
`git clone <repository>`를 사용하여 저장소를 복제합니다
`git status`를 사용하여 git 저장소의 상태를 확인합니다
`git add`를 사용하여 변경사항을 스테이징 영역에 추가합니다
`git commit`을 사용하여 변경사항을 커밋합니다
`git push`를 사용하여 변경사항을 원격 저장소에 푸시합니다
`git pull`을 사용하여 원격 저장소에서 변경사항을 가져옵니다
`git merge`를 사용하여 브랜치를 병합합니다
`git log`를 사용하여 커밋 기록을 봅니다
